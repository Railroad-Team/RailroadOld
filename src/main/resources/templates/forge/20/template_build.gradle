// fileName: props.gradleKotlinDSL ? null : defaultName
plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.+'<%
    if (props.mixinGradle) {
        out.print("\n    id 'org.spongepowered.mixin' version '0.7.+'")
    }
    if (props.modsDotGroovy) {
        out.print("\n    id 'io.github.groovymc.modsdotgroovy' version '1.1.2'")
    }
    if (mappings.channel == 'parchment') {
        out.print("\n    id 'org.parchmentmc.librarian.forgegradle' version '1.+'")
    } %>
}

<% if (props.usesMixins)
    out.println("""\nmixin {
    add sourceSets.main, '${modId}.refmap.json'
    config '${modId}.mixins.json'
    debug.export = true
}""") %>

group = '${packageName}'
archivesBaseName = '${modId}'

<% if (props.apiSourceSet || props.datagenSourceSet) {
    out.println('\nsourceSets {')
    if (props.apiSourceSet) {
        out.println('    api')
        out.println('    main.compileClasspath += api.output')
    }
    if (props.datagenSourceSet) {
        out.println('    datagen {')
        if (props.apiSourceSet) {
            out.println('        compileClasspath += api.output')
        }
        out.println('        compileClasspath += main.output')
        out.println('    }')
    }
    out.println('}')

    final configurations = []
    if (props.apiSourceSet) configurations.add('apiImplementation')
    if (props.datagenSourceSet) configurations.add('datagenImplementation')
    out.println('configurations {')
    configurations.each {
        out.println("    ${it}.extendsFrom(minecraft)")
    }
    out.print('}')
} %>

<% if (props.modsDotGroovy) out.println('modsDotGroovy.dslVersion = \'1.2.2\'; modsDotGroovy.platform \'forge\'') %>

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: \${System.getProperty 'java.version'}, JVM: \${System.getProperty 'java.vm.version'} (\${System.getProperty 'java.vendor'}), Arch: \${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: '${mappings.channel}', version: '${mappings.version}'

    <% if (props.usesAccessTransformers == false) out.print '// ' %>accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {<% if (props.sharedRunDirs == true) out.println('\n            workingDirectory project.file(\'run\')') %>
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', '${modId}'
            mods {
                ${modId} {
                    <% final srcSets = ['main']
                    if (props.apiSourceSet) srcSets.add('api')
                    srcSets.each {
                        out.println("source sourceSets.$it")
                    }%>
                }
            }
        }
        <% if (props.sharedRunDirs == true) {
            out.print('\n        client {}\n        server {}')
        } else {
            out.println('''
        client {
            workingDirectory project.file(\'run/client\')
        }
        
        server {
            workingDirectory project.file(\'run/server\')
        }''')} %>
        <% if ((versions.minecraft.split('\\.')[1] as int) >= 17) {
            if (props.sharedRunDirs == false) {
                out.println('''
        gameTestServer {
            workingDirectory project.file(\'run/server\')
        }''')
            } else {
                out.println("gameTestServer {}")
            }
        }%>
        data {
            workingDirectory project.file('run')
            args '--mod', '${modId}', '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/') <% if (props.datagenSourceSet) out.println("""
            mods {
                $modId {
                    source sourceSets.datagen
                }
            }""")%>
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    <% if (props.defineVersionsInPropertiesFile == true) out.print("minecraft 'net.minecraftforge:forge:\${minecraft_version}-\${forge_version}'") else out.print("minecraft 'net.minecraftforge:forge:${versions.minecraft}-${versions.forge}'") %><% if (props.usesMixins) out.print("\nannotationProcessor 'org.spongepowered:mixin:0.8.5:processor'") %>
}

final manifestAttributes = [
        'Specification-Title'   : '${modId}',
        'Specification-Vendor'  : '${author ?: modId}',
        'Specification-Version' : '1',
        'Implementation-Title'  : project.name,
        'Implementation-Version': project.jar.archiveVersion,
        'Implementation-Vendor' : '${author ?: modId}'
]
<% if (props.usesMixins) {
    out.println("manifestAttributes.put('MixinConfigs', '${modId}.mixins.json')")
}%>

jar {
    manifest.attributes(manifestAttributes)
    finalizedBy('reobfJar')
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}